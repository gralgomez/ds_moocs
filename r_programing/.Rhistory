data("AirPassengers")
AirPassengers
data.1 <- data("PlantGrowth")
data.1
PlantGrowth
data("AirPassengers")
AirPassengers
head(AirPassengers)
dim(AirPassengers)
sign(airquality)
View(AirPassengers)
dim(AirPassengers)
AirPassengers
head(airquality)
git config --global user.email "laura.gabrysiak@gmail.com"
git config --global user.name "gralgomez"
git config --global user.email 'laura.gabrysiak@gmail.com'
git config --global user.name 'gralgomez'
setwd("/Users/laurita/Documents/GitHub/ds_moocs/r_programing/")
a <- 3.14
class(a)
b <- 'word'
class(b)
print(b)
class(b)
print(a)
print(b, class(b))
b <- 'word'
print(b, class(b))
print(b + class(b))
print(b) class(b)
print(b); class(b)
b <- 'hello world'
print(b); class(b)
env1 <- new.env()  # create a new environment
assign("a", 3, envir = env1)  # store a=3 inside env1
ls()  # returns objects in .GlobalEnv
ls(env1)  # returns objects in env1
get('a', envir=env1)  # retrieve value from env1
assign("a", 3, envir = env1)  # store a=3 inside env1
assign("a", 3, envir = env1)  # store a=3 inside env1
ls()  # returns objects in .GlobalEnv
ls(env1)  # returns objects in env1
get('a', envir=env1)  # retrieve value from env1
rm(a)  # delete the object 'a'
v <- charToRaw("Hello")
print(class(v))
print(v); print(class(v))
v <- charToRaw("Laura")
print(v); print(class(v))
print(b; class(b))
print(class(b))
a <- 3.14
print(class(b))
print(b + class(b))
print(class(b))
a <- 3.14
print(class(a))
a; print(class(a))
b ; print(class(b))
m ; class(m)
m <- 2+5i
m ; class(m)
d <- 2L
d ; class(d)
v <- charToRaw("laura")
v; class(v)
#numeric // as.numeric
a <- 3.14
a; print(class(a))
#character // as.character
b <- 'hello world'
b ; print(class(b))
d <- 2L
d ; class(d)
m <- 2+5i
m ; class(m)
v <- charToRaw("laura")
v; class(v)
l <- TRUE
l; class(l)
l <- TRUE
l; class(l)
#numeric // as.numeric
a <- 3.14
a; print(class(a))
#character // as.character
b <- 'hello world'
b ; print(class(b))
d <- 2L
d ; class(d)
m <- 2+5i
m ; class(m)
v <- charToRaw("laura")
v; class(v)
---
title: "R Exercises"
output: html_notebook
---
```{r}
# source: http://rstatistics.net/
setwd("/Users/laurita/Documents/GitHub/ds_moocs/r_programing/")
```
# R Tutorial
This worksheet is meant to refresh R concepts and put them to practice in a near future. The source of the tutorial is: http://rstatistics.net/r-tutorial-exercise-for-beginners/
## Environments
The outermost main container is called the global environment (globalenv()).
This is the default place will R will store all objects that you create. You can place as many objects as your computer memory will allow it to hold.
```{r}
env1 <- new.env()  # create a new environment
assign("a", 3, envir = env1)  # store a=3 inside env1
ls()  # returns objects in .GlobalEnv
ls(env1)  # returns objects in env1
get('a', envir=env1)  # retrieve value from env1
```
Once you know how to insert objects into your environment,
here is how to erase them.
```{r}
rm(a)  # delete the object 'a'
rm(list = ls())  # caution: delete all objects in .GlobalEnv
rm(list=ls())  # remove all objects in work space
gc()  # free system memory
```
## Classes & Data types
### Variable Types
(https://www.tutorialspoint.com/r/r_data_types.htm)
character  – Strings
integer  – Integers
numeric  – Integers + Fractions
factor  – Categorical variable where each level is a category
logical  – Boolean (e.g TRUE/FALSE)
complex  – Complex numbers (3 + 2i)
raw - Storage coded (e.g "Hello" is stored as 48656c6c6f)
```{r}
l <- TRUE
l; class(l)
a <- 3.14
a; print(class(a))
b <- 'hello world'
b ; print(class(b))
d <- 2L
d ; class(d)
m <- 2+5i
m ; class(m)
v <- charToRaw("laura")
v; class(v)
```
### Data Types
There are many types of R-objects. The frequently used ones are:
#### Vector
A collection of elements of same class
```{r}
# Create a vector.
apple <- c('red','green',"yellow")
print(apple); print(class(apple))
````
#### Matrix
All columns must uniformly contain only one variable type.
```{r}
# Create a matrix.
M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M); print(class(M))
````
#### Data.frame
The columns can contain different classes.
```{r}
# Create a data frame.
BMI <- 	data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
print(BMI); print(class(BMI))
````
#### List
Can hold objects of different classes and lengths
```{r}
# Create a list.
list1 <- list(c(2,5,3),21.3,sin)
print(apple); print(class(apple))
````
#### Array
```{r}
# Create a list.
array <- array(c('green','yellow'),dim = c(3,3,2))
print(array); print(class(array))
````
#### Factor
```{r}
# Create a list.
apple_colors <- c('green','green','yellow','red','red','red','green')
factor_apple <- factor(apple_colors)
print(factor_apple); print(class(factor_apple))
````
```{r}
env1 <- new.env()  # create a new environment
assign("a", 3, envir = env1)  # store a=3 inside env1
ls()  # returns objects in .GlobalEnv
ls(env1)  # returns objects in env1
get('a', envir=env1)  # retrieve value from env1
```{r}
```{r}
l <- TRUE
l; class(l)
a <- 3.14
a; print(class(a))
```{r}
```{r}
env1 <- new.env()  # create a new environment
assign("a", 3, envir = env1)  # store a=3 inside env1
```{r}
ls(env1)  # returns objects in env1
get('a', envir=env1)  # retrieve value from env1
print(get('a', envir=env1))
---
title: "R Exercises"
output: html_notebook
---
```{r}
# source: http://rstatistics.net/
setwd("/Users/laurita/Documents/GitHub/ds_moocs/r_programing/")
```
# R Tutorial
This worksheet is meant to refresh R concepts and put them to practice in a near future. The source of the tutorial is: http://rstatistics.net/r-tutorial-exercise-for-beginners/
## Environments
The outermost main container is called the global environment (globalenv()).
This is the default place will R will store all objects that you create. You can place as many objects as your computer memory will allow it to hold.
```{r}
env1 <- new.env()  # create a new environment
assign("a", 3, envir = env1)  # store a=3 inside env1
ls()  # returns objects in .GlobalEnv
ls(env1)  # returns objects in env1
print(get('a', envir=env1))  # retrieve value from env1
```{r}
env1 <- new.env()  # create a new environment
assign("a", 3, envir = env1)  # store a=3 inside env1
ls()  # returns objects in .GlobalEnv
ls(env1)  # returns objects in env1
get('a', envir=env1)  # retrieve value from env1
rm(a)  # delete the object 'a'
rm(list = ls())  # caution: delete all objects in .GlobalEnv
rm(list=ls())  # remove all objects in work space
l <- TRUE
l; class(l)
a <- 3.14
a; print(class(a))
b <- 'hello world'
b ; print(class(b))
d <- 2L
d ; class(d)
m <- 2+5i
m ; class(m)
v <- charToRaw("laura")
v; class(v)
# Create a vector.
apple <- c('red','green',"yellow")
print(apple); print(class(apple))
# Create a matrix.
M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M); print(class(M))
BMI <- 	data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
print(BMI); print(class(BMI))
# Create a list.
list1 <- list(c(2,5,3),21.3,sin)
print(apple); print(class(apple))
array <- array(c('green','yellow'),dim = c(3,3,2))
print(array); print(class(array))
apple_colors <- c('green','green','yellow','red','red','red','green')
factor_apple <- factor(apple_colors)
print(factor_apple); print(class(factor_apple))
list1 <- list(c(2,5,3),21.3,sin)
print(list1); print(class(list1))
vector <- c('red', 4, 2L)
vector
class(vector)
# Create a list.
array <- array(c('green','yellow'),dim = c(3,3,2))
print(array); print(class(array))
array1 <- array(c('green','yellow'),dim = c(3,3,2))
print(array1); print(class(array1))
array1 <- array(c('blue','green',yellow'),dim = c(3,3,2))
)
array1 <- array(c('blue','green','yellow'), dim = c(3,3,2))
array1
array1 <- array(c('green','yellow'), dim = c(3,3,2))
array1
?array
array(1:3, c(2,2,4))
array(1:3, c(2,4,2))
sort(apple) #ascending sort
sort(apple, decreasing = TRUE) #descending sort
vector2 <- 1:3
apple2 <- apple[2:3]
apple2 <- apple[2:3]; apple2
apple2 <- apple[2:3]; # elements in 1,2,3 position
apple2
apple3 <- apple[c(1,3)] # elements in 1,3 position
apple3
apple4 <- apple[-1] # all elements except 1 position
apple4
apple
apple2 <- apple[2:3]; # elements in 1,2,3 position
apple2
apple3 <- apple[c(1,3)] # elements in 1,3 position
apple3
apple4 <- apple[-1] # all elements except 1 position
apple4
apple
apple2 <- apple[2:3]; # elements in 2,3 position
apple2
apple3 <- apple[c(1,3)] # elements in 1,3 position
apple3
apple4 <- apple[-1] # all elements except 1 position
apple4
sort(apple) #ascending sort
sort(apple, decreasing = TRUE) #descending sort
apple[order(apple)] #ascending sort
apple[rev(order(apple))]  #descending sort
apple <- cbind(apple, NA)
apple
apple <- c('red','green',"yellow")
apple <- append(apple, NA)
apple
apple5 <- !is.na(apple)
apple5
apple5 <- apple[!is.na(apple)]
apple5
sample(apple5)
sample(apple)
set.seed(50, kind = apple)
set.seed(50)
set.seed(50)
sample(apple2, 3, replace=T)  # sample with replacement
v <- set.seed(10)
v
sample(apple)  # sample all elements randomly
set.seed(50) # optional. set it to get same random samples.
sample(sample, 2)  # sample 3 elem without replacement
sample(apple, 2)  # sample 3 elem without replacement
apple
sample(apple)  # sample all elements randomly
set.seed(50) # optional. set it to get same random samples.
sample(apple, 2)  # sample 3 elem without replacement
apple2
sample(apple2, 3, replace=T)  # sample with replacement
apple
sample(apple)  # sample all elements randomly
set.seed(50) # optional. set it to get same random samples.
sample(apple, 2)  # sample 3 elem without replacement
apple2
sample(apple2, 3, replace=T)  # sample with replacement
list1 <- list(c(2,5,3),21.3,sin)
print(list1); print(class(list1))
list1 <- list(c(2,5,3), 21.3, sin)
print(list1); print(class(list1))
print(list1); print('class:' class(list1))
list1 <- list(c(2,5,3), 21.3, sin)
print(list1); print(class(list1))
dateString <- "15/06/2014"
myDate <- as.Date(dateString, format="%d/%m/%Y")
class(myDate)  # "Date"
myPOSIXltDate %lt;- as.POSIXlt(myDate)
dateString <- "15/06/2014"
myDate <- as.Date(dateString, format="%d/%m/%Y")
dateString <- "15/06/2014"
myDate <- as.Date(dateString, format="%d/%m/%Y")
myDate
myDate; print(class(myDate))  # "Date"
myPOSIXltDate %lt;- as.POSIXlt(myDate)
myPOSIXltDate%lt;- as.POSIXlt(myDate)
myPOSIXltDate.lt <- as.POSIXlt(myDate)
myPOSIXltDate.lt <- as.POSIXlt(myDate); print(class(myPOSIXltDate))  # POSIXlt
myPOSIXltDate.lt <- as.POSIXlt(myDate)
myPOSIXltDate.lt <- as.POSIXlt(myDate); print(class(myPOSIXltDate.lt))
myPOSIXctDate <- as.POSIXct(myPOSIXltDate)
myPOSIXltDate1 <- as.POSIXlt(myDate); print(class(myPOSIXltDate.lt))
myPOSIXctDate2 <- as.POSIXct(myPOSIXltDate); print(class(myPOSIXctDate2))
myPOSIXltDate1 <- as.POSIXlt(myDate); print(class(myPOSIXltDate1))
myPOSIXctDate2 <- as.POSIXct(myPOSIXltDate1); print(class(myPOSIXctDate2))  # convert to POSIXct
myDate; print(class(myDate))  # "Date"
myPOSIXltDate1; print(class(myPOSIXltDate1))
myPOSIXctDate2 <- as.POSIXct(myDate)
myPOSIXctDate2; print(class(myPOSIXctDate2))  # convert to POSIXct
dateString <- "15/06/2014"
# "Date"
myDate <- as.Date(dateString, format="%d/%m/%Y")
myDate; print(class(myDate))
# "POSIXlt" "POSIXt"
myPOSIXltDate1 <- as.POSIXlt(myDate);
myPOSIXltDate1; print(class(myPOSIXltDate1))
# "POSIXct" "POSIXt"
myPOSIXctDate2 <- as.POSIXct(myDate);
myPOSIXctDate2; print(class(myPOSIXctDate2))
print(year(myDate))
year.myDate <- as.Date(myDate, format("%YYYY"))
year.myDate
attributes (myPOSIXltDate1)
unclass (POSIXltDate)  # works!
unclass (POSIXltDate1)  # works!
myPOSIXltDate1 <- as.POSIXlt(myDate);
myPOSIXltDate1; print(class(myPOSIXltDate1))
dateString <- "15/06/2014"
# "Date"
myDate <- as.Date(dateString, format="%d/%m/%Y")
myDate; print(class(myDate))
# "POSIXlt" "POSIXt"
myPOSIXltDate1 <- as.POSIXlt(myDate);
myPOSIXltDate1; print(class(myPOSIXltDate1))
# "POSIXct" "POSIXt"
myPOSIXctDate2 <- as.POSIXct(myDate);
myPOSIXctDate2; print(class(myPOSIXctDate2))
attributes (myPOSIXltDate1) #attributes
attributes (myPOSIXltDate1) #attributes
unclass (POSIXltDate1)  # works!
attributes(myPOSIXltDate1) #attributes
unclass(myPOSIXltDate1)  # works!
unlist(myPOSIXltDate)  # works!
unlist(myPOSIXltDate1)
attributes(myPOSIXltDate1) #attributes
unclass(myPOSIXltDate1)  # works!
#names(myPOSIXltDate)  # doesn't work on a POSIXlt object
unlist(myPOSIXltDate1)  # works!
attributes(myPOSIXltDate1) #attributes
head(unclass(myPOSIXltDate1))  # works!
#names(myPOSIXltDate)  # doesn't work on a POSIXlt object
unlist(myPOSIXltDate1)  # works!
attributes(myPOSIXltDate1) #attributes
#unclass(myPOSIXltDate1)  # works!
#names(myPOSIXltDate)  # doesn't work on a POSIXlt object
unlist(myPOSIXltDate1)  # works!
#### Unlist
print(unlist(list1));
print(class(unlist(list1)))
list1 <- list(c(2,5,3), 21.3, sin)
print(list1); print(class(list1))
list2 <- unlist(list1);
list2 <- unlist(list1);
list2; print(class(list2))
list2
list2 <- unlist(list1)
list2; print(class(list2))
list2 <- unlist(list1, recursive = TRUE)
list2; print(class(list2))
list2 <- unlist(list1, recursive = FALSE)
list2; print(class(list2))
